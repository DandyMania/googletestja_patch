Index: include/gtest/internal/gtest-port.h
===================================================================
diff --git a/trunk/include/gtest/internal/gtest-port.h b/trunk/include/gtest/internal/gtest-port.h
--- a/trunk/include/gtest/internal/gtest-port.h	(リビジョン 686)
+++ b/trunk/include/gtest/internal/gtest-port.h	(作業コピー)
@@ -256,11 +256,16 @@
 //   Int32FromGTestEnv()  - parses an Int32 environment variable.
 //   StringFromGTestEnv() - parses a string environment variable.
 
+#ifdef __STRICT_ANSI__
+# undef __STRICT_ANSI__
 #include <ctype.h>   // for isspace, etc
 #include <stddef.h>  // for ptrdiff_t
 #include <stdlib.h>
 #include <stdio.h>
-#include <string.h>
+#include <string.h>
+# define __STRICT_ANSI__
+#endif
+
 #ifndef _WIN32_WCE
 # include <sys/types.h>
 # include <sys/stat.h>
Index: src/gtest-internal-inl.h
===================================================================
diff --git a/trunk/src/gtest-internal-inl.h b/trunk/src/gtest-internal-inl.h
--- a/trunk/src/gtest-internal-inl.h	(リビジョン 686)
+++ b/trunk/src/gtest-internal-inl.h	(作業コピー)
@@ -245,6 +245,7 @@
 // and contains invalid UTF-16 surrogate pairs, values in those pairs
 // will be encoded as individual Unicode characters from Basic Normal Plane.
 GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);
+GTEST_API_ std::string MultiByteStringToUtf8(const char* str, int num_chars);
 
 // Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
 // if the variable is present. If a file already exists at this location, this
Index: src/gtest.cc
===================================================================
diff --git a/trunk/src/gtest.cc b/trunk/src/gtest.cc
--- a/trunk/src/gtest.cc	(リビジョン 686)
+++ b/trunk/src/gtest.cc	(作業コピー)
@@ -1518,7 +1518,27 @@
   }
   return StringStreamToString(&stream);
 }
+std::string MultiByteStringToUtf8(const char* str, int num_chars) {
+ if (num_chars == -1)
+ num_chars = static_cast<int>(strlen(str));
+
+ ::std::stringstream stream;
+ for (int i = 0; i < num_chars; ++i) {
+ wchar_t wc=0;
+ int len = mbtowc(&wc, str+i, MB_CUR_MAX);
+ if( len > 1 )
+ {
+ stream << WideStringToUtf8(&wc, 1);
+ i += len-1;
+ }
+ else
+ {
+ stream << str[i];
+ }
+ }
+ return StringStreamToString(&stream);
+}
 
 // Converts a wide C string to an std::string using the UTF-8 encoding.
 // NULL will be converted to "(null)".
 std::string String::ShowWideCString(const wchar_t * wide_c_str) {
@@ -3026,7 +3046,8 @@
 
   // May c appear in a well-formed XML document?
   static bool IsValidXmlCharacter(char c) {
-    return IsNormalizableWhitespace(c) || c >= 0x20;
+    //return IsNormalizableWhitespace(c) || c >= 0x20;
+	return IsNormalizableWhitespace(c) || c >= 0x20 || c < 0x00;
   }
 
   // Returns an XML-escaped copy of the input string str.  If
@@ -3033,7 +3054,7 @@
   // is_attribute is true, the text is meant to appear as an attribute
   // value, and normalizable whitespace is preserved by replacing it
   // with character references.
-  static std::string EscapeXml(const std::string& str, bool is_attribute);
+  static std::string EscapeXml(const std::string& str_in, bool is_attribute);
 
   // Returns the given string with all characters invalid in XML removed.
   static std::string RemoveInvalidXmlCharacters(const std::string& str);
@@ -3139,8 +3160,9 @@
 // TODO(wan): It might be nice to have a minimally invasive, human-readable
 // escaping scheme for invalid characters, rather than dropping them.
 std::string XmlUnitTestResultPrinter::EscapeXml(
-    const std::string& str, bool is_attribute) {
+    const std::string& str_in, bool is_attribute) {
   Message m;
+  const std::string str = MultiByteStringToUtf8(str_in.c_str(), -1);
 
   for (size_t i = 0; i < str.size(); ++i) {
     const char ch = str[i];
@@ -3316,11 +3338,17 @@
               << EscapeXmlAttribute(summary.c_str())
               << "\" type=\"\">";
       const string detail = location + "\n" + part.message();
-      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
+     // OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
+	  const string message = MultiByteStringToUtf8(detail.c_str(), -1);
+	  OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(message).c_str());
       *stream << "</failure>\n";
     }
   }
-
+  // skip
+  if( !test_info.should_run() && failures == 0 ) {
+  	*stream << ">\n      <skipped />\n    </testcase>\n";
+    return;
+  }
   if (failures == 0)
     *stream << " />\n";
   else
Index: src/gtest_main.cc
===================================================================
diff --git a/trunk/src/gtest_main.cc b/trunk/src/gtest_main.cc
--- a/trunk/src/gtest_main.cc	(リビジョン 686)
+++ b/trunk/src/gtest_main.cc	(作業コピー)
@@ -27,7 +27,11 @@
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-#include <stdio.h>
+#ifdef __STRICT_ANSI__
+# undef __STRICT_ANSI__
+#include <stdio.h>
+# define __STRICT_ANSI__
+#endif
 
 #include "gtest/gtest.h"
 
